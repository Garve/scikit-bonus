{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Models\n",
    "\n",
    "There's a few linear models out there that we felt were generally useful. This\n",
    "document will highlight some of them. \n",
    "\n",
    "## Least Absolute Deviation Regression\n",
    "\n",
    "Imagine that you have a dataset with some outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1f94cdc8b88>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "np.random.seed(0)\n",
    "X = np.linspace(0, 1, 20)\n",
    "y = 3*X + 1 + 0.5*np.random.randn(20)\n",
    "X = X.reshape(-1, 1)\n",
    "\n",
    "y[10] = 8\n",
    "y[15] = 15\n",
    "\n",
    "plt.figure(figsize=(16, 4))\n",
    "plt.scatter(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple linear regression will not do a good job since it is distracted by the outliers. That is because it optimizes the mean squared error\n",
    "$$ \\sum_i \\left(y_i-\\textrm{model}(x_i)\\right)^2 $$\n",
    "\n",
    "which penalizes a few large errors more than many tiny errors. For example, if y-model(x) = 4 for some single observation, the MSE here is 16. If there are two observations with y_1 - model(x_1) = 2 and y_2 - model(x_2) = 2, the MSE is 8 in total, which is less than for one larger error. Note that the sum of the errors is the same in both cases.\n",
    "\n",
    "Hence, linear regression does the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1f95eb48108>]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "x = np.array([0, 1]).reshape(-1, 1)\n",
    "plt.figure(figsize=(16, 4))\n",
    "plt.scatter(X, y)\n",
    "plt.plot(x, LinearRegression().fit(X, y).predict(x), 'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By changing the loss function to the mean absolute deviation \n",
    "$$ \\sum_i \\left|y_i-\\textrm{model}(x_i)\\right|\\enspace, $$\n",
    "\n",
    "we can let the model put the same focus on each error. This yields the least absolute deviation (LAD) regression that tries to agree with the majority of the points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1f960952a08>]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from skbonus.linear_model import LADRegression\n",
    "\n",
    "x = np.array([0, 1]).reshape(-1, 1)\n",
    "plt.figure(figsize=(16, 4))\n",
    "plt.scatter(X, y)\n",
    "plt.plot(x, LinearRegression().fit(X, y).predict(x), 'r')\n",
    "plt.plot(x, LADRegression().fit(X, y).predict(x), 'g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### See also\n",
    "scikit-learn tackles this problem by offering a variety of [robust regressors](https://scikit-learn.org/stable/auto_examples/linear_model/plot_robust_fit.html). Many of them use an indirect approach to reduce the effect of outliers. [RANSAC](https://en.wikipedia.org/wiki/Random_sample_consensus), for example, samples random points from the dataset until it consists of all inliers.\n",
    "The closest thing to LADRegression that scikit-learn offers is the [HuberRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.HuberRegressor.html) with a loss function that is partly a squared and partly an absolute error. However, it is more complicated and requires hyperparameter tuning to unleash its full potential.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
